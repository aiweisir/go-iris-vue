// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// conf/app.yml
// conf/casbinpolicy.csv
// conf/db.yml
// conf/rbac_model.conf
package parse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x41\x4a\x43\x31\x10\x86\xf7\x81\xdc\x61\xa0\xdb\x96\xa6\x62\x45\xb3\xd3\xda\x8a\xa5\xb5\xa2\xaf\xb8\x10\x91\xf4\x65\x7c\x2f\x90\x97\x29\x49\x9e\xad\x07\x10\x71\xe1\x05\x3c\x82\x8b\xee\x5d\x78\x1b\x45\xbd\x85\x84\xda\x32\x9b\x99\xff\x9b\xff\xe7\x3f\x36\x41\xcd\x2c\x9e\xab\x58\xf6\xc8\x7b\xcc\xa3\x21\x27\xe1\x4e\xd9\x80\x9c\xf5\xdd\x06\xf6\x43\xae\xe6\xb8\x05\x03\xe3\x71\x8c\xb1\x24\x7d\x46\xf1\xd0\x5a\x5a\xa0\xde\xc2\xff\xcc\x23\xd2\x0f\x3d\x72\xa1\xae\xe6\x29\x74\xe2\xa6\xae\x52\x3e\x94\xca\x6e\x3f\x33\x53\xe1\x80\x7c\xa5\xa2\x84\x31\xb9\x26\x88\x0e\x0c\x95\x83\x1d\x21\xf6\xa0\xd3\x95\x62\x57\x8a\x2e\x9c\x8c\x33\xce\x7a\xa5\xf2\x01\xa3\x84\x69\x36\x68\xed\x73\xd6\xf8\x79\x7a\xfb\x5a\xbd\x7e\xbe\x3f\xff\x3e\xbe\x7c\x7f\xac\x38\x9b\xc4\x12\xbd\xe4\x0c\xe0\xb4\x70\xe4\x71\x7a\x31\x0a\x12\xae\xdb\x4d\x68\xd7\x01\x7d\xdb\x52\x61\xdc\xe6\xf0\x58\x98\x10\xb1\x09\x6b\xf9\x76\xbe\xd0\x37\xc9\x3a\xbc\xca\x52\x29\xaa\xa3\x84\x03\x21\xa0\x11\x30\x27\xa7\x13\x1a\x51\x31\xc2\x7b\xb4\x12\x34\xce\xea\x22\x49\x97\x98\xfb\xd4\x69\xb9\x5c\xb6\xd6\x3b\x67\x69\xfe\x02\x00\x00\xff\xff\xe7\xf9\xd4\xf3\x56\x01\x00\x00")

func confAppYmlBytes() ([]byte, error) {
	return bindataRead(
		_confAppYml,
		"conf/app.yml",
	)
}

func confAppYml() (*asset, error) {
	bytes, err := confAppYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.yml", size: 342, mode: os.FileMode(438), modTime: time.Unix(1547799025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confCasbinpolicyCsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xd0\x51\x48\xcc\xc9\x4c\x4e\xd5\x51\xd0\x4f\x49\x2c\x49\x2c\x4e\x2d\x31\xd4\xd7\xd2\x51\x70\x77\x0d\xe1\xe5\xc2\x26\x57\x94\x5a\x9c\x5f\x5a\x94\x9c\x6a\xa8\xa3\x10\xe0\x1f\x0c\x51\x94\x94\x9f\x84\x50\x62\x84\xac\x44\x0b\x9f\xbc\x11\xc2\x1a\x34\x15\x69\xf9\x39\x29\xa9\x45\x60\x87\x80\x2c\x01\x04\x00\x00\xff\xff\x89\x87\x1a\x1a\xa4\x00\x00\x00")

func confCasbinpolicyCsvBytes() ([]byte, error) {
	return bindataRead(
		_confCasbinpolicyCsv,
		"conf/casbinpolicy.csv",
	)
}

func confCasbinpolicyCsv() (*asset, error) {
	bytes, err := confCasbinpolicyCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/casbinpolicy.csv", size: 164, mode: os.FileMode(438), modTime: time.Unix(1546593644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confDbYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\xd0\xb1\x4a\xc3\x60\x10\xc0\xf1\x3d\x90\x77\x38\xe8\x5e\x12\x0b\x2a\xb7\x3a\x09\x82\x83\x4f\x70\x49\xce\xa6\xf0\x25\x5f\xfb\xdd\xa5\xd5\xad\x83\x8b\x8b\x0e\x52\x04\x11\x71\xa8\x14\xb7\xe8\x28\x82\x4f\x93\xaf\xfa\x16\xf2\x05\x41\xdf\xc1\xf1\x7e\xdc\xff\x86\x8b\xa3\x8a\x44\xd9\x61\x1c\x01\x14\x13\x32\x9c\x2b\x42\x75\x2e\x33\x13\xa4\x11\x76\x08\xce\x5a\x0d\xd3\x94\x44\x16\xd6\x15\xbf\x52\x5a\x51\x84\x74\x67\x6f\x98\x0c\x93\x61\xda\x2f\x59\xa7\x08\xa3\x51\xb2\xdb\x9f\x24\xa5\x8c\x84\x11\x72\x92\x6c\x52\x07\xcb\x4b\x72\xc2\x8a\xd0\xe8\xe9\x7e\x00\x29\xed\xe2\x64\x66\x10\xd4\x35\x1c\xc0\xd8\xf1\x11\xcf\xd9\x20\x14\x9c\x35\xe3\x40\x15\x9d\x1d\x16\x86\x0f\x6c\x5d\x0b\x42\x9a\xc0\x00\x3e\x3f\x1e\xfc\xd5\x93\x7f\x79\xdc\xde\x5d\x6c\x9f\xdf\xbe\x6e\x5f\xfd\xaa\xed\xd6\x9b\xae\xbd\x8e\xa3\x41\x9f\x1c\x4f\xb9\xfe\x9b\xf8\xfb\x65\xb7\xde\xf8\xcb\x9b\xee\x7d\xf9\x93\xaf\xda\x38\x12\x43\x73\xfe\xcf\x2f\xf8\x0e\x00\x00\xff\xff\xa6\xd8\x6a\xbd\x07\x02\x00\x00")

func confDbYmlBytes() ([]byte, error) {
	return bindataRead(
		_confDbYml,
		"conf/db.yml",
	)
}

func confDbYml() (*asset, error) {
	bytes, err := confDbYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/db.yml", size: 519, mode: os.FileMode(438), modTime: time.Unix(1546593644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confRbac_modelConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x41\x6a\xc3\x30\x14\x44\xf7\x02\xdd\x61\xc8\x22\x58\x20\x0c\x3d\x80\x8e\xd0\x13\x04\x63\x1c\xf5\xcb\x51\x2b\x47\xea\x97\x44\x1a\xc8\xe1\x8b\x54\x0a\x35\x25\xab\x59\xcc\xfb\x33\xf3\x4f\x4c\x9f\x95\x72\x99\xdf\xc8\xf9\xab\x2f\x3e\x5e\x27\x29\x18\x06\xb9\x9e\x35\xe2\xf9\x5d\x63\xb1\x45\x23\x57\x27\x85\x14\xa7\x14\x83\xb7\xf7\x3d\x9e\x9e\xe3\x1c\x03\xed\xe1\x15\x06\xb3\xc6\xfc\x37\x8d\x9c\x23\x5b\x26\x29\xa8\x25\xc5\x8d\x86\xdb\x85\x98\x30\xa4\x91\x5c\x81\x31\x58\x42\x88\x37\xa5\xfa\xd1\xb6\x14\x7b\x21\xce\x93\x14\x1b\x0c\xd6\x81\xc7\xde\x9e\x9a\x28\x1c\x8f\xf8\xa0\xfb\x6b\x83\x06\x1e\xfb\xa4\xd4\xa4\x3b\x4c\x2b\x7d\xfd\x7a\xb9\xba\x9f\x2b\xf7\xdf\xeb\x5f\xa4\x26\x0a\x8f\x07\x7a\x45\x1b\x72\x78\x39\x7c\x07\x00\x00\xff\xff\xc5\xe2\x83\xca\x34\x01\x00\x00")

func confRbac_modelConfBytes() ([]byte, error) {
	return bindataRead(
		_confRbac_modelConf,
		"conf/rbac_model.conf",
	)
}

func confRbac_modelConf() (*asset, error) {
	bytes, err := confRbac_modelConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/rbac_model.conf", size: 308, mode: os.FileMode(438), modTime: time.Unix(1546666501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.yml":          confAppYml,
	"conf/casbinpolicy.csv": confCasbinpolicyCsv,
	"conf/db.yml":           confDbYml,
	"conf/rbac_model.conf":  confRbac_modelConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": {nil, map[string]*bintree{
		"app.yml":          {confAppYml, map[string]*bintree{}},
		"casbinpolicy.csv": {confCasbinpolicyCsv, map[string]*bintree{}},
		"db.yml":           {confDbYml, map[string]*bintree{}},
		"rbac_model.conf":  {confRbac_modelConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
